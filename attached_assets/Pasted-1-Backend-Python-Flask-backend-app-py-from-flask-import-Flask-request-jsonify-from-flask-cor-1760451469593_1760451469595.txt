1️⃣ Backend (Python Flask) – backend/app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
from sklearn.linear_model import LinearRegression
from textblob import TextBlob

app = Flask(__name__)
CORS(app)

# Home route
@app.route('/')
def home():
    return jsonify({"message": "AI Academic Analytics Backend Running!"})

# Academic Analysis Route
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    df = pd.read_csv(file)

    # Prediction Example
    if 'Attendance' in df.columns and 'Total' in df.columns:
        X = df[['Attendance']]
        y = df['Total']
        model = LinearRegression()
        model.fit(X, y)
        df['Predicted_Total'] = model.predict(X).round(2)

    # KPIs
    avg_marks = df['Total'].mean() if 'Total' in df.columns else 0
    pass_count = df[df['Total'] >= 40].shape[0] if 'Total' in df.columns else 0
    fail_count = df[df['Total'] < 40].shape[0] if 'Total' in df.columns else 0
    total_students = df.shape[0]

    # Department-wise performance
    dept_avg = df.groupby('Department')['Total'].mean().round(2).to_dict() if 'Department' in df.columns else {}

    # Student heatmap
    student_scores = df[['Student_Name','Total','Predicted_Total']].to_dict(orient='records') if 'Student_Name' in df.columns else []

    # CSV as string
    csv_data = df.to_csv(index=False)

    return jsonify({
        "kpis": {
            "average_marks": round(avg_marks,2),
            "pass_count": pass_count,
            "fail_count": fail_count,
            "total_students": total_students
        },
        "department_avg": dept_avg,
        "student_scores": student_scores,
        "csv_data": csv_data
    })

# Feedback Sentiment Analysis Route
@app.route('/feedback', methods=['POST'])
def feedback_analysis():
    if 'file' not in request.files:
        return jsonify({"error": "No file uploaded"}), 400

    file = request.files['file']
    df = pd.read_csv(file)

    if 'Feedback' not in df.columns:
        return jsonify({"error": "CSV must have 'Feedback' column"}), 400

    sentiments = {"positive":0, "neutral":0, "negative":0}
    df['Sentiment'] = ""
    for i, feedback in enumerate(df['Feedback']):
        analysis = TextBlob(str(feedback))
        if analysis.sentiment.polarity > 0.1:
            sentiments['positive'] += 1
            df.at[i,'Sentiment'] = "Positive"
        elif analysis.sentiment.polarity < -0.1:
            sentiments['negative'] += 1
            df.at[i,'Sentiment'] = "Negative"
        else:
            sentiments['neutral'] += 1
            df.at[i,'Sentiment'] = "Neutral"

    csv_data = df.to_csv(index=False)
    return jsonify({
        "sentiments": sentiments,
        "csv_data": csv_data
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


Install Backend Dependencies:

pip install flask flask-cors pandas scikit-learn textblob
python -m textblob.download_corpora

2️⃣ Frontend (React + Tailwind) – frontend/src/App.js
import { useState } from "react";
import { Bar, Pie } from "react-chartjs-2";
import 'chart.js/auto';

function App() {
  const [file, setFile] = useState(null);
  const [kpis, setKpis] = useState(null);
  const [deptData, setDeptData] = useState(null);
  const [studentScores, setStudentScores] = useState(null);
  const [feedbackFile, setFeedbackFile] = useState(null);
  const [feedbackSentiments, setFeedbackSentiments] = useState(null);
  const [message, setMessage] = useState("");

  // Academic Upload
  const handleUpload = async () => {
    if (!file) return setMessage("Please select an academic CSV file!");
    const formData = new FormData();
    formData.append("file", file);

    const res = await fetch("http://localhost:5000/upload", {
      method: "POST",
      body: formData,
    });

    if (res.ok) {
      const data = await res.json();
      setKpis(data.kpis);
      setDeptData(data.department_avg);
      setStudentScores(data.student_scores);
      setMessage("Academic Analysis Completed!");
    } else {
      setMessage("Error uploading academic file.");
    }
  };

  const downloadCSV = () => {
    if (!studentScores) return;
    const csvHeader = "Student_Name,Total,Predicted_Total\n";
    const csvRows = studentScores.map(s => `${s.Student_Name},${s.Total},${s.Predicted_Total || ''}`).join("\n");
    const csvContent = csvHeader + csvRows;
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'analyzed_academic_data.csv';
    a.click();
  };

  // Feedback Upload
  const handleFeedbackUpload = async () => {
    if (!feedbackFile) return setMessage("Please select a feedback CSV file!");
    const formData = new FormData();
    formData.append("file", feedbackFile);

    const res = await fetch("http://localhost:5000/feedback", {
      method: "POST",
      body: formData,
    });

    if (res.ok) {
      const data = await res.json();
      setFeedbackSentiments(data.sentiments);
      setMessage("Feedback Analysis Completed!");
    } else {
      setMessage("Error uploading feedback file.");
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-6">
      <h1 className="text-3xl font-bold mb-6">AI Academic Analytics Dashboard</h1>

      {/* Academic Upload */}
      <h2 className="text-xl font-semibold mb-2">Academic Data Analysis</h2>
      <input
        type="file"
        accept=".csv"
        onChange={(e) => setFile(e.target.files[0])}
        className="mb-2 p-2 border rounded"
      />
      <button
        onClick={handleUpload}
        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mb-4"
      >
        Upload & Analyze
      </button>

      {/* Feedback Upload */}
      <h2 className="text-xl font-semibold mb-2">Teacher Feedback Analysis</h2>
      <input
        type="file"
        accept=".csv"
        onChange={(e) => setFeedbackFile(e.target.files[0])}
        className="mb-2 p-2 border rounded"
      />
      <button
        onClick={handleFeedbackUpload}
        className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 mb-4"
      >
        Analyze Feedback
      </button>

      <p className="mb-4 text-red-500">{message}</p>

      {/* KPIs */}
      {kpis && (
        <div className="w-full max-w-2xl bg-white p-6 rounded shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Key Performance Indicators</h2>
          <div className="grid grid-cols-2 gap-4">
            <div>Average Marks: <strong>{kpis.average_marks}</strong></div>
            <div>Total Students: <strong>{kpis.total_students}</strong></div>
            <div>Pass Count: <strong>{kpis.pass_count}</strong></div>
            <div>Fail Count: <strong>{kpis.fail_count}</strong></div>
          </div>
          <button
            onClick={downloadCSV}
            className="mt-4 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
          >
            Download Analyzed CSV
          </button>
        </div>
      )}

      {/* Department Bar Chart */}
      {deptData && (
        <div className="w-full max-w-2xl bg-white p-6 rounded shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Department-wise Average Marks</h2>
          <Bar 
            data={{
              labels: Object.keys(deptData),
              datasets: [{
                label: "Average Marks",
                data: Object.values(deptData),
                backgroundColor: "#3B82F6"
              }]
            }}
          />
        </div>
      )}

      {/* Student Heatmap */}
      {studentScores && (
        <div className="w-full max-w-2xl bg-white p-6 rounded shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Student Performance Heatmap</h2>
          <div className="grid grid-cols-3 gap-2">
            {studentScores.map((s, i) => (
              <div key={i} 
                   className={`p-2 text-center text-white rounded ${
                     s.Total >= 75 ? "bg-green-500" : s.Total >= 50 ? "bg-yellow-500" : "bg-red-500"
                   }`}>
              {s.Student_Name}: {s.Total}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Feedback Pie Chart */}
      {feedbackSentiments && (
        <div className="w-full max-w-md bg-white p-6 rounded shadow mb-6">
          <h2 className="text-xl font-semibold mb-4">Feedback Sentiment Distribution</h2>
          <Pie 
            data={{
              labels: ["Positive", "Neutral", "Negative"],
              datasets: [{
                label: "Feedback Count",
                data: [
                  feedbackSentiments.positive,
                  feedbackSentiments.neutral,
                  feedbackSentiments.negative
                ],
                backgroundColor: ["#34D399", "#FBBF24", "#F87171"]
              }]
            }}
          />
        </div>
      )}

    </div>
  );
}

export default App;

3️⃣ Tailwind Setup (React)
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p


tailwind.config.js

module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: { extend: {} },
  plugins: [],
}


src/index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

✅ All Features Included

Academic CSV upload & AI prediction

KPIs display (average marks, pass/fail count, total students)

Department-wise bar chart

Student performance heatmap (color coded)

Download analyzed CSV

Feedback CSV upload & sentiment analysis

Feedback pie chart

Fully responsive and interactive dashboard

Ready for Replit deployment

If you want, I can also write a single-step “Replit